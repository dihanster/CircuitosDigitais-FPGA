// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/28/2018 10:38:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MaquinaDeEstados3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MaquinaDeEstados3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg down;
reg reset;
reg up;
// wires                                               
wire S0;
wire S1;
wire S2;
wire S3;

// assign statements (if any)                          
MaquinaDeEstados3 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.down(down),
	.reset(reset),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.up(up)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// up
initial
begin
	up = 1'b1;
end 

// down
initial
begin
	down = 1'b0;
	down = #240000 1'b1;
	down = #70000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 
endmodule

